---
name: Publish to Ansible Galaxy

on:
  push:
    branches:
      - main
    paths:
      - 'galaxy.yml'
      - 'pyproject.toml'
      - 'plugins/**'
      - 'docs/**'
      - 'meta/**'
  workflow_dispatch:

jobs:
  check-versions:
    name: Check Version Alignment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      versions-match: ${{ steps.compare.outputs.match }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyyaml toml

      - name: Get version from galaxy.yml
        id: get-version
        run: |
          python3 << 'EOF'
          import yaml
          with open('galaxy.yml', 'r') as f:
              data = yaml.safe_load(f)
              version = data['version']
              print(f"version={version}")
              with open('$GITHUB_OUTPUT', 'a') as output:
                  output.write(f"version={version}\n")
          EOF

      - name: Compare versions
        id: compare
        run: |
          python3 << 'EOF'
          import yaml
          import toml

          # Read galaxy.yml version
          with open('galaxy.yml', 'r') as f:
              galaxy_data = yaml.safe_load(f)
              galaxy_version = galaxy_data['version']

          # Read pyproject.toml version
          with open('pyproject.toml', 'r') as f:
              pyproject_data = toml.load(f)
              pyproject_version = pyproject_data['project']['version']

          # Compare versions
          match = galaxy_version == pyproject_version

          print(f"galaxy.yml version: {galaxy_version}")
          print(f"pyproject.toml version: {pyproject_version}")
          print(f"Versions match: {match}")

          with open('$GITHUB_OUTPUT', 'a') as output:
              output.write(f"match={'true' if match else 'false'}\n")
              output.write(f"galaxy_version={galaxy_version}\n")
              output.write(f"pyproject_version={pyproject_version}\n")

          if not match:
              print(f"::error::Version mismatch! galaxy.yml has {galaxy_version} but pyproject.toml has {pyproject_version}")
              exit(1)
          EOF

  build-and-publish:
    name: Build and Publish to Galaxy
    runs-on: ubuntu-latest
    needs: check-versions
    if: always() && needs.check-versions.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible-core

      - name: Build collection
        run: |
          ansible-galaxy collection build --force
          echo "Built collection for version ${{ needs.check-versions.outputs.version }}"

      - name: Publish to Ansible Galaxy
        env:
          ANSIBLE_GALAXY_TOKEN: ${{ secrets.ANSIBLE_GALAXY_TOKEN }}
        run: |
          if [ -z "$ANSIBLE_GALAXY_TOKEN" ]; then
            echo "::error::ANSIBLE_GALAXY_TOKEN secret is not set"
            exit 1
          fi

          TARBALL="oriolrius-netmaker-${{ needs.check-versions.outputs.version }}.tar.gz"

          if [ ! -f "$TARBALL" ]; then
            echo "::error::Collection tarball not found: $TARBALL"
            exit 1
          fi

          echo "Publishing $TARBALL to Ansible Galaxy..."
          ansible-galaxy collection publish "$TARBALL" --token="$ANSIBLE_GALAXY_TOKEN" --force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-versions.outputs.version }}
          name: Release v${{ needs.check-versions.outputs.version }}
          body: |
            ## Ansible Collection Release v${{ needs.check-versions.outputs.version }}

            Published to Ansible Galaxy: https://galaxy.ansible.com/ui/repo/published/oriolrius/netmaker/

            ### Installation
            ```bash
            ansible-galaxy collection install oriolrius.netmaker
            ```

            ### Changes
            See commit history for detailed changes.
          files: |
            oriolrius-netmaker-${{ needs.check-versions.outputs.version }}.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
